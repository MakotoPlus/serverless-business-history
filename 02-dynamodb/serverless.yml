# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: business-history-dynamodb
#
# Dynamodb版 (2021.03.31)
#
#
# app and org for use with dashboard.serverless.com
#app: business-history
#org: business-history
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dynamodb-local

custom:
  #cognito-name: business-history
  s3bucketname: ${self:provider.stage}-s3-business-history-bk
  #ACCESS_CONTROL_ALLOW_ORIGIN: ${file(./conf/${self:provider.stage}.yml):ACCESS_CONTROL_ALLOW_ORIGIN}
  #AUTHORIZER_NAME: ${self:provider.stage}-business-history-bk
  #COGNITO_ARN: ${file(./conf/${self:provider.stage}.yml):COGNITO_ARN}
  ROLE_ARN: ${file(./conf/${self:provider.stage}.yml):ROLE_ARN}
  #LAYERS_01: ${file(./conf/${self:provider.stage}.yml):LAYERS_01}
  DYNAMODB_ENDPOINT: ${file(./conf/${self:provider.stage}.yml):DYNAMODB_ENDPOINT}
  TABLE:
    M_USER: ${self:provider.stage}_${file(./conf/${self:provider.stage}.yml):TABLE.M_USER}
    T_WORK_HISTORY: ${self:provider.stage}_${file(./conf/${self:provider.stage}.yml):TABLE.T_WORK_HISTORY}
  stage: ${opt:stage, 'dev'}

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: false
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: jankens
            sources: [./migrations/jankens.json]
          - table: ${self:provider.stage}_m_user
            sources: [./migrations/dev_m_user.json]

provider:
  name: aws
  runtime: python3.8
  stage: ${self:custom.stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  iam:
    role:
       ${self:custom.ROLE_ARN}
# you can define service wide environment variables here
  environment:
    #LAYER_COMMON: common-layer
    S3_BUCKET: ${self:custom.s3bucketname}
    #ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.ACCESS_CONTROL_ALLOW_ORIGIN}
    TABLE_M_USER: ${self:custom.TABLE.M_USER}
    TABLE_T_WORK_HISTORY: ${self:custom.TABLE.T_WORK_HISTORY}
    DYNAMODB_TABLE: items
    DYNAMODB_ENDPOINT: ${self:custom.DYNAMODB_ENDPOINT}
#  apiGateway:
#    apiKeys:             # APIキーを生成

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:ListBucket
        - s3:PutObject
        - s3:ListBucket
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:ListUsers
        - cognito-idp:AdminListGroupsForUser
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : ${self:provider.environment.S3_BUCKET}
            - "/*"
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
          - - "arn:aws:cognito-idp:ap-northeast-1:*:*"

# you can add packaging information here
package:
  #これにより、functionごとにパッケージが作成されるようになるらしい
  individually: true
#  include:
#    - lib/**
#    - venv/Lib/**
#     - report01.py
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - venv/**
    - node_modules/**
    - .vscode/**
    - .dynamodb/**
    - .git/**
    - .serverless/**
    - __pycache__/**
    - migrations/**
    - report/**
    - tmp/**
    - layer/**
    - cognito/**
    - tmp/**
    - conf/**
    - businesshistory/**
    - resource-serverless/**
    - userinfo/**
    - handler.py
    - piprequest.txt
    - README.md
    - requirements.txt
    - package-lock.json
    - workspace.code-workspace
    - migrations/**
    - package.json
    - pyrightconfig.json
    - requirements.txt
    - serverless - コピー.yml
    - testdata001.json

#    - exclude-me.py
#    - exclude-me-dir/**

functions:

resources:
  - Resources:
#      Bucket:
#        Type: AWS::S3::Bucket
#        Properties:
#          BucketName: ${self:provider.environment.S3_BUCKET}
#
#      ApiGatewayAuthorizer:
#         Type: AWS::ApiGateway::Authorizer
#         Properties:
#           AuthorizerResultTtlInSeconds: 30
#           IdentitySource: method.request.header.Authorization
#           Name: ${self:custom.AUTHORIZER_NAME}
#           RestApiId: 
#             Ref: ApiGatewayRestApi
#           Type: COGNITO_USER_POOLS
#           ProviderARNs:
#             - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":userpool/", Ref: CognitoUserPool]]}
  # DynamoDBの構築
  - ${file(./resource-serverless/dynamotable.yml)}

Outputs:
